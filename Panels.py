__author__ = 'Christoph'
import wx
import wx.lib.scrolledpanel
from ogl_shapes import InputShape, ScenarioShape, ogl


class InputPanel(wx.lib.scrolledpanel.ScrolledPanel):
    def __init__(self, parent, nb):
        wx.lib.scrolledpanel.ScrolledPanel.__init__(self, parent, -1)
        self.nb = nb
        inputButtons = []
        size = (70, 25)
        ###Place to input more input buttons###
        inputButtons.append(wx.Button(self, wx.ID_ANY, 'Victim', size=size))
        inputButtons.append(wx.Button(self, wx.ID_ANY, 'Attacker', size=size))
        sizer = wx.FlexGridSizer(rows=5, cols=4, hgap=0, vgap=0)
        for button in inputButtons:
            sizer.Add(button)
        border = wx.BoxSizer()
        border.Add(sizer, 0, wx.ALL, 10)
        self.SetSizerAndFit(border)
        self.SetSize((400, 200))
        self.SetupScrolling()

        for i in range(len(inputButtons)):
            inputButtons[i].Bind(wx.EVT_BUTTON, self.onInputButton)

    def onInputButton(self, event):
        self.nb.GetPage(self.nb.GetSelection()).addInput(name=event.GetEventObject().GetLabel())


class ScenarioPanel(wx.lib.scrolledpanel.ScrolledPanel):
    def __init__(self, parent, nb):
        wx.lib.scrolledpanel.ScrolledPanel.__init__(self, parent, -1)
        self.nb = nb
        scenarioButtons = []
        size = (70, 25)
        ###Place to input more scenario buttons###
        scenarioButtons.append(wx.Button(self, id=wx.ID_ANY, label="MITM", size=size))
        scenarioButtons.append(wx.Button(self, id=wx.ID_ANY, label="DDOS", size=size))

        sizer = wx.FlexGridSizer(rows=5, cols=4, hgap=0, vgap=0)
        for button in scenarioButtons:
            sizer.Add(button)
        border = wx.BoxSizer()
        border.Add(sizer, 0, wx.ALL, 10)
        self.SetSizerAndFit(border)
        self.SetSize((400, 200))
        self.SetupScrolling()

        for i in range(len(scenarioButtons)):
            scenarioButtons[i].Bind(wx.EVT_BUTTON, self.onScenarioButton)

    def onScenarioButton(self, event):
        self.nb.GetPage(self.nb.GetSelection()).addScenario(name=event.GetEventObject().GetLabel())
        event.GetEventObject().Disable()


class EditingPanel(ogl.ShapeCanvas):
    def __init__(self, parent):
        ogl.ShapeCanvas.__init__(self, parent=parent)
        # put stuff into sizer

        self.diagram = ogl.Diagram()
        self.SetDiagram(self.diagram)
        self.diagram.SetCanvas(self)
        self.shapes = []
        self.save_gdi = []

    def addScenario(self, posx=100, posy=100, name="default"):
        self.addShape(
            ScenarioShape(),
            posx, posy, wx.BLACK_PEN, wx.LIGHT_GREY_BRUSH, name
        )
        self.drawPen()

    def addInput(self, posx=300, posy=100, name="default"):
        self.addShape(
            InputShape(),
            posx, posy, wx.BLACK_PEN, wx.LIGHT_GREY_BRUSH, name
        )
        self.drawPen()

    def drawPen(self):
        dc = wx.ClientDC(self)
        self.PrepareDC(dc)

        for x in range(len(self.shapes)):
            fromShape = self.shapes[x]
            if x + 1 == len(self.shapes):
                toShape = self.shapes[0]
            else:
                toShape = self.shapes[x + 1]

            line = ogl.LineShape()
            line.SetCanvas(self)
            line.SetPen(wx.BLACK_PEN)
            line.SetBrush(wx.BLACK_BRUSH)
            line.AddArrow(ogl.ARROW_ARROW)
            line.MakeLineControlPoints(2)
            fromShape.AddLine(line, toShape)
            self.diagram.AddShape(line)
            line.Show(True)
        self.Refresh()

    def addShape(self, shape, x, y, pen, brush, text):
        # Composites have to be moved for all children to get in place

        shape.SetCanvas(self)
        shape.SetX(x)
        shape.SetY(y)
        if pen:
            shape.SetPen(pen)
        if brush:
            shape.SetBrush(brush)
        if text:
            for line in text.split('\n'):
                shape.AddText(line)
                shape.SetShadowMode(ogl.SHADOW_RIGHT)
        self.diagram.AddShape(shape)
        shape.Show(True)
        self.shapes.append(shape)
        return shape
