__author__ = 'cierpka'
#!/usr/bin/env python
import wx.html
import wx
import wx.aui as aui
from hashlib import sha512

import transaction

from ZODB_Handler import ZODBConnect

ID_FILE_NEW = wx.NewId()
ID_FILE_SAVE = wx.NewId()
ID_FILE_OPEN = wx.NewId()
ID_FILE_EXIT = wx.NewId()
ID_GENERATOR_INPUT = wx.NewId()
ID_GENERATOR_SCENARIO = wx.NewId()
ID_HELP_ABOUT = wx.NewId()

print wx.version()


class MultiInputDialog(wx.Dialog):
    def __init__(self, parent):
        wx.Dialog.__init__(self, parent)
        #self.SetSize((200, 80))
        self.username = wx.TextCtrl(self, value="Username")
        self.password = wx.TextCtrl(self, value="******", style=wx.TE_PASSWORD)
        btnOk = wx.Button(self, wx.ID_OK)
        btnCancel = wx.Button(self, wx.ID_CANCEL)

        btnSizer = wx.StdDialogButtonSizer()
        btnSizer.AddButton(btnOk)
        #self.Bind(wx.WXK_RETURN)
        self.EnableCloseButton(True)
        btnSizer.AddButton(btnCancel)
        btnSizer.Realize()

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.username, 0, wx.EXPAND)
        sizer.Add(self.password, 0, wx.EXPAND)
        sizer.Add(btnSizer)
        self.SetSizer(sizer)
        self.Fit()


#Global frame for the panels and the menu
class MainFrame(wx.Frame):
    def __init__(self, parent=None, id=-1, pos=wx.DefaultPosition, title="PenTesGen"):
        size = 1024, 800
        self.db = ZODBConnect("userinput.fs")
        self.dbroot = self.db.dbroot
        login = False
        wx.Frame.__init__(self, parent, id, title, pos, size)

        self.loginDatabase()
        self.nb = aui.AuiNotebook(self)
        self.welcomePage = self.WelcomePanel()
        self.auimanager = aui.AuiManager()
        self.auimanager
        self.createMenu()
        self.initGui()

    def loginDatabase(self):
        dlg = MultiInputDialog(self)
        valid = dlg.ShowModal()
        user = dlg.username.GetValue()
        password = sha512(dlg.password.GetValue()).hexdigest()
        if valid == wx.ID_OK:
            if user in self.dbroot['users']:
                if password == self.dbroot['users'][user]['password']:
                    return True
                    # for user in self.dbroot['user']:
                    #     if ['asd', hashlib.sha512(dlg.GetValue())] == user:
                    #         login = True
                    #         break
        elif valid == wx.ID_CANCEL:
            self.db.close()
            self.Destroy()
            exit()

    def initGui(self):
        self.nb.AddPage(self.welcomePage, "Welcome!")
        self.auimanager.SetManagedWindow(self)
        self.auimanager.AddPane(self.nb,
                                aui.AuiPaneInfo().Name("Notebook").CenterPane().CloseButton(
                                    True).MaximizeButton(True).PaneBorder(False))
        #self.auimanager.GetPane("Test").MinimizeMode(AUI_MINIMIZE_POS_BOTTOM)
        self.auimanager.AddPane(self.InputPanel(),
                                aui.AuiPaneInfo().Name("Input").Caption("Input").Right().CloseButton(False).PaneBorder(
                                    False))
        self.auimanager.AddPane(self.ScenarioPanel(),
                                aui.AuiPaneInfo().Name("Scenario").Caption("Scenario").Right().CloseButton(
                                    False).MinimizeButton(True).PaneBorder(False))
        #

        test = self.CreateTreeCtrl()
        self.auimanager.AddPane(test, aui.AuiPaneInfo().Name("tb5").Left().Layer(1))
        self.auimanager.GetPane("tb5").Show()
        self.auimanager.Update()
        #Declaring the menu


    def createMenu(self):
        file_menu = wx.Menu()
        file_menu.Append(ID_FILE_NEW, "&New Project")
        file_menu.Append(ID_FILE_OPEN, "&Open Project")
        file_menu.Append(ID_FILE_SAVE, '&Save Project')
        file_menu.AppendSeparator()
        file_menu.Append(ID_FILE_EXIT, 'E&xit Program')

        generator_menu = wx.Menu()
        generator_menu.Append(ID_GENERATOR_INPUT, 'Input')
        generator_menu.Append(ID_GENERATOR_SCENARIO, 'Scenario')

        help_menu = wx.Menu()
        help_menu.Append(ID_HELP_ABOUT, 'About')

        menu_bar = wx.MenuBar()
        menu_bar.Append(file_menu, '&File')
        #menu_bar.Append(generator_menu, 'Ge&nerator')
        menu_bar.Append(help_menu, 'He&lp')

        statusbar = self.CreateStatusBar(2, wx.ST_SIZEGRIP)
        statusbar.SetStatusWidths([-2, -3])
        statusbar.SetStatusText("Ready", 0)
        statusbar.SetStatusText("Welcome To wxPython!", 1)

        self.SetMenuBar(menu_bar)
        self.Bind(wx.EVT_MENU, self.OnNew, id=ID_FILE_NEW)
        self.Bind(wx.EVT_MENU, self.OnClose, id=ID_FILE_EXIT)
        self.Bind(wx.EVT_MENU, self.OnSave, id=ID_FILE_SAVE)
        self.Bind(wx.EVT_MENU, self.OnAbout, id=ID_HELP_ABOUT)
        #self.Bind(wx.EVT_MENU, self.OnScenario, id=ID_GENERATOR_SCENARIO)
        #self.Bind(wx.EVT_MENU, self.OnInput, id=ID_GENERATOR_INPUT)
        self.Bind(wx.EVT_MENU, self.OnLoad, id=ID_FILE_OPEN)
        self.Bind(wx.EVT_CLOSE, self.OnClose)

        self.SetMinSize(wx.Size(400, 300))


    def WelcomePanel(self):
        self.text = '''
                    <html>
                    <body bgcolor="#00000">
                    <center><table bgcolor="#FF0000" width="100%" cellspacing="0"
                    cellpadding="0" border="1">
                    <tr>
                    <td align="center"><h1>Penetration-Testing-Generator</h1></td>
                    </tr>
                    </table>
                    </center>
                    <p><b>PenTesGen</b> is a tool to demonstrate various security threats.
                    <br><br>
                    It is developed by<br>
                    <b>Christoph Cierpka</b>
                    </body>
                    </html>
                    '''

        wx.Dialog(self, -1, 'About',
                  size=(440, 400))
        self.html = wx.html.HtmlWindow(self)
        self.html.SetPage(self.text)
        button = wx.Button(self, wx.ID_OK, "Okay")
        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.html, 1, wx.EXPAND | wx.ALL, 5)
        sizer.Add(button, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        self.SetSizer(sizer)
        self.Layout()
        return self.html


    def EditingPanel(self):
        self.panel = wx.Panel(self, -1)
        self.SetBackgroundColour("White")
        return self.panel


    def ScenarioPanel(self):
        self.panel = wx.Panel(self, -1)
        self.panel.SetSize((400, 200))
        return self.panel


    def InputPanel(self):
        self.panel = wx.Panel(self, -1)
        return self.panel


    def CreateTreeCtrl(self):
    #Developing
        tree = wx.TreeCtrl(self, -1, wx.Point(0, 0), wx.Size(160, 250),
                           wx.TR_DEFAULT_STYLE | wx.NO_BORDER)
        tree.SetSize((400, 400))
        root = tree.AddRoot("Projects")
        items = []

        imglist = wx.ImageList(16, 16, True, 2)
        imglist.Add(wx.ArtProvider_GetBitmap(wx.ART_FOLDER, wx.ART_OTHER, wx.Size(16, 16)))
        imglist.Add(wx.ArtProvider_GetBitmap(wx.ART_NORMAL_FILE, wx.ART_OTHER, wx.Size(16, 16)))
        tree.AssignImageList(imglist)

        items.append(tree.AppendItem(root, "Item 1", 0))
        items.append(tree.AppendItem(root, "Item 2", 0))
        items.append(tree.AppendItem(root, "Item 3", 0))
        items.append(tree.AppendItem(root, "Item 4", 0))
        items.append(tree.AppendItem(root, "Item 5", 0))

        for ii in xrange(len(items)):
            id = items[ii]
            tree.AppendItem(id, "Subitem 1", 1)
            tree.AppendItem(id, "Subitem 2", 1)
            tree.AppendItem(id, "Subitem 3", 1)
            tree.AppendItem(id, "Subitem 4", 1)
            tree.AppendItem(id, "Subitem 5", 1)

        tree.Expand(root)

        return tree


    def OnNew(self, event):
        dlg = wx.TextEntryDialog(self, "Name your new project!", defaultValue="New Project", style=wx.OK | wx.CANCEL)
        if dlg.ShowModal() == wx.ID_OK:
            self.nb.AddPage(self.EditingPanel(), dlg.GetValue(), select=True)
        dlg.Destroy()


    def OnScenario(self, event):
        pass


    def OnInput(self, event):
        pass

    def OnClose(self, event=None):
        dlg = wx.MessageDialog(self,
                               "Do you really want to close this application?",
                               "Confirm Exit", wx.OK | wx.CANCEL | wx.ICON_QUESTION)
        result = dlg.ShowModal()
        dlg.Destroy()
        if result == wx.ID_OK:
            self.db.close()
            self.Destroy()

    def OnAbout(self, event):
        info = wx.AboutDialogInfo()
        info.SetName("bleh")
        info.SetVersion("0.1")
        info.SetLicence("GPL")
        info.SetDevelopers(["ME!"])
        info.SetDescription("Wurst wurst Brot brot")
        wx.AboutBox(info)

    def OnSave(self, event):
        wx.MessageBox("Save into database", "Blehbleh", wx.OK | wx.ICON_INFORMATION, self)
        self.dbroot['user'] = ['Test1', 'Pass1']
        transaction.commit()

    def OnLoad(self, event):
        dlg = wx.TextEntryDialog(self, "Password pl0x", defaultValue="fail", style=wx.OK | wx.CANCEL)
        if dlg.ShowModal() == wx.ID_OK:
            if dlg.GetValue() == self.db.dbroot['user'][1]:
                wx.MessageBox(self.db.dbroot['user'][1], "asda")
            else:
                wx.MessageBox(self.db.dbroot['user'][0], "fails")


class App(wx.App):
    def OnInit(self):
        self.frame = MainFrame()
        self.frame.Show()
        self.frame.Maximize()
        self.SetTopWindow(self.frame)
        return True


def main():
    """This is my Penetration-Test-Generator prototype """
    app = App()
    app.MainLoop()


if __name__ == '__main__':
    main()