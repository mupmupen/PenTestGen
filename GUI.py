__author__ = 'cierpka'
#!/usr/bin/env python


from hashlib import sha512
import wx.html
import wx
import wx.aui as aui
import wx.lib.ogl as ogl

import transaction

from ogl_panel import *
from ZODB_Handler import ZODBConnect


ID_FILE_NEW_PROJECT = wx.NewId()
ID_FILE_NEW_FILE = wx.NewId()
ID_FILE_SAVE = wx.NewId()
ID_FILE_OPEN_PROJECT = wx.NewId()
ID_FILE_EXIT = wx.NewId()
ID_GENERATOR_INPUT = wx.NewId()
ID_GENERATOR_SCENARIO = wx.NewId()
ID_HELP_ABOUT = wx.NewId()
ID_MITM = wx.NewId()
ID_SCAN = wx.NewId()
print wx.version()


class MultiInputDialog(wx.Dialog):
    def __init__(self, parent):
        wx.Dialog.__init__(self, parent)
        self.username = wx.TextCtrl(self, value="Username")
        self.password = wx.TextCtrl(self, value="******", style=wx.TE_PASSWORD)
        btnOk = wx.Button(self, wx.ID_OK)
        btnCancel = wx.Button(self, wx.ID_CANCEL)
        btnSizer = wx.StdDialogButtonSizer()
        btnSizer.AddButton(btnOk)
        self.EnableCloseButton(True)
        btnSizer.AddButton(btnCancel)
        btnSizer.Realize()
        self.scenarioButtons = []
        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.username, 0, wx.EXPAND)
        sizer.Add(self.password, 0, wx.EXPAND)
        sizer.Add(btnSizer)
        self.SetSizer(sizer)
        self.Fit()


#Global frame for the panels and the menu
class MainFrame(wx.Frame):
    def __init__(self, parent=None, id=-1, pos=wx.DefaultPosition, title="PenTesGen"):
        size = 1024, 800
        self.db = ZODBConnect("userinput.fs")
        self.dbroot = self.db.dbroot
        login = False
        wx.Frame.__init__(self, parent, id, title, pos, size)
        #self.loginDatabase()
        self.nb = aui.AuiNotebook(self)
        self.welcomePage = self.WelcomePanel()
        self.createMenu()
        self.auimanager = aui.AuiManager()
        self.scenarioButtons = []
        self.initGui()

        self.user = "admin"

    #Small credential check for an user
    def loginDatabase(self):
        dlg = MultiInputDialog(self)
        valid = dlg.ShowModal()
        self.user = dlg.username.GetValue()
        password = sha512(dlg.password.GetValue()).hexdigest()
        if valid == wx.ID_OK:
            if self.user in self.dbroot['users']:
                if password != self.dbroot['users'][self.user]['password']:
                    exit()
            else:
                exit()
        elif valid == wx.ID_CANCEL:
            self.db.close()
            self.Destroy()
            exit()

    #Creates the menu for the frame
    def createMenu(self):
        file_menu = wx.Menu()
        file_menu.Append(ID_FILE_NEW_PROJECT, "&New Project")
        file_menu.Append(ID_FILE_NEW_FILE, "New &File")
        file_menu.Append(ID_FILE_OPEN_PROJECT, "&Open Project")
        file_menu.Append(ID_FILE_SAVE, '&Save Project')
        file_menu.AppendSeparator()
        file_menu.Append(ID_FILE_EXIT, 'E&xit Program')

        generator_menu = wx.Menu()
        generator_menu.Append(ID_GENERATOR_INPUT, 'Generate current project')
        generator_menu.Append(ID_GENERATOR_SCENARIO, 'Generate a random project')

        help_menu = wx.Menu()
        help_menu.Append(ID_HELP_ABOUT, 'About')

        menu_bar = wx.MenuBar()
        menu_bar.Append(file_menu, '&File')
        menu_bar.Append(generator_menu, 'Ge&nerator')
        menu_bar.Append(help_menu, 'He&lp')

        statusbar = self.CreateStatusBar(3, wx.ST_SIZEGRIP)
        statusbar.SetStatusWidths([-1, -2, -3])
        statusbar.SetStatusText("Ready", 0)
        statusbar.SetStatusText("Welcome to PenTestGen", 1)
        statusbar.SetStatusText("Christoph Cierpka", 2)
        self.SetMenuBar(menu_bar)
        self.Bind(wx.EVT_MENU, self.OnNew, id=ID_FILE_NEW_PROJECT)
        self.Bind(wx.EVT_MENU, self.OnClose, id=ID_FILE_EXIT)
        self.Bind(wx.EVT_MENU, self.OnSave, id=ID_FILE_SAVE)
        self.Bind(wx.EVT_MENU, self.OnAbout, id=ID_HELP_ABOUT)
        self.Bind(wx.EVT_MENU, self.OnNewFile, id=ID_FILE_NEW_FILE)
        self.Bind(wx.EVT_MENU, self.OnLoad, id=ID_FILE_OPEN_PROJECT)
        self.Bind(wx.EVT_CLOSE, self.OnClose)

        self.SetMinSize(wx.Size(400, 300))

    #Initilaize the GUI
    def initGui(self):
        self.nb.AddPage(self.welcomePage, "Welcome!")
        self.auimanager.SetManagedWindow(self)
        self.auimanager.AddPane(self.nb,
                                aui.AuiPaneInfo().Name("Notebook").CenterPane().CloseButton(
                                    True).MaximizeButton(True).PaneBorder(False))

        self.auimanager.AddPane(self.InputPanel(),
                                aui.AuiPaneInfo().Name("Input").Caption("Input").Right().CloseButton(False).PaneBorder(
                                    False))
        self.auimanager.AddPane(self.ScenarioPanel(),
                                aui.AuiPaneInfo().Name("Scenario").Caption("Scenario").Right().CloseButton(
                                    False).MinimizeButton(True).PaneBorder(False))

        self.projects_files = self.CreateTreeCtrl()
        self.auimanager.AddPane(self.projects_files,
                                aui.AuiPaneInfo().Name("projects").Caption("Your Projects").Left())

        self.auimanager.Update()
        #Declaring the menu

    #First panel that is shown
    def WelcomePanel(self):
        self.text = '''
                    <html>
                    <body bgcolor="#00000">
                    <center><table bgcolor="#FF0000" width="100%" cellspacing="0"
                    cellpadding="0" border="1">
                    <tr>
                    <td align="center"><h1>Penetration-Testing-Generator</h1></td>
                    </tr>
                    </table>
                    </center>
                    <p><b>PenTesGen</b> is a tool to demonstrate various security threats.
                    <br><br>
                    It is developed by<br>
                    <b>Christoph Cierpka</b>
                    </body>
                    </html>
                    '''

        wx.Dialog(self, -1, 'About',
                  size=(440, 400))
        self.html = wx.html.HtmlWindow(self)
        self.html.SetPage(self.text)
        button = wx.Button(self, wx.ID_OK, "Okay")
        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.html, 1, wx.EXPAND | wx.ALL, 5)
        sizer.Add(button, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        self.SetSizer(sizer)
        self.Layout()
        return self.html

    #Drag and Drop Panel for scenarios
    def ScenarioPanel(self): #TODO Button an ScnearioFrame binden
        self.panel = wx.Panel(self, -1)

        size = (70, 25)
        self.scenarioButtons.append(wx.Button(self.panel, -1, 'MITM', size=size))
        test = wx.Button(self.panel, -1, 'asd')
        self.scenarioButtons.append(wx.Button(self.panel, -1, 'Scan', size=size))
        sizer = wx.FlexGridSizer(rows=5, cols=4, hgap=0, vgap=0)
        for button in self.scenarioButtons:
            sizer.Add(button)
        border = wx.BoxSizer()
        border.Add(sizer, 0, wx.ALL, 10)
        self.panel.SetSizerAndFit(border)
        self.panel.SetSize((400, 200))
        print self.scenarioButtons
        self.panel.Bind(wx.EVT_BUTTON, self.scenarioButtons[0], self.OnScenarioButton)
        return self.panel

    def OnScenarioButton(self, event=None):
        self.nb.GetPage(self.nb.GetSelection()).addScenario()

    #Drag and Drop Panel for inputs
    def InputPanel(self): #TODO same
        self.panel = wx.Panel(self, -1)
        buttons = []
        size = (70, 25)
        buttons.append(wx.Button(self.panel, wx.ID_OK, 'Victims', size=size))
        buttons.append(wx.Button(self.panel, wx.ID_OK, 'Attacker', size=size))
        sizer = wx.FlexGridSizer(rows=5, cols=4, hgap=0, vgap=0)
        for button in buttons:
            sizer.Add(button)
        border = wx.BoxSizer()
        border.Add(sizer, 0, wx.ALL, 10)
        self.panel.SetSizerAndFit(border)
        self.panel.SetSize((400, 200))
        return self.panel

    #Projecttree
    def CreateTreeCtrl(self):
        self.tree = wx.TreeCtrl(self, -1, wx.Point(0, 0), wx.Size(200, 400),
                                wx.TR_DEFAULT_STYLE | wx.NO_BORDER)

        self.root = self.tree.AddRoot('IT-Security-Harassments')
        self.tree.SetPyData(self.root, None)
        self.items = []
        imglist = wx.ImageList(16, 16, True, 2)
        imglist.Add(wx.ArtProvider_GetBitmap(wx.ART_FOLDER, wx.ART_OTHER, wx.Size(16, 16)))
        imglist.Add(wx.ArtProvider_GetBitmap(wx.ART_NORMAL_FILE, wx.ART_OTHER, wx.Size(16, 16)))
        self.tree.AssignImageList(imglist)
        self.tree.Expand(self.root)
        self.Bind(wx.EVT_TREE_ITEM_ACTIVATED, self.OnNewFile, self.tree)
        self.Bind(wx.EVT_TREE_ITEM_RIGHT_CLICK, self.OnNew, self.tree)
        return self.tree

    #Creates a new projectfolder
    def OnNew(self, event):
        dlg = wx.TextEntryDialog(self, "Name your new project!", defaultValue="New Project", style=wx.OK | wx.CANCEL)
        if dlg.ShowModal() == wx.ID_OK:
            self.items.append(self.tree.AppendItem(self.root, dlg.GetValue(), 0))
            self.tree.Expand(self.root)
            self.tree.ExpandAll()
        dlg.Destroy()

    #Creates a new file in a project folder
    def OnNewFile(self, event):
        dlg = wx.TextEntryDialog(self, "Name your new file!", defaultValue="New File", style=wx.OK | wx.CANCEL)
        if dlg.ShowModal() == wx.ID_OK:
            target_name = self.tree.GetItemText(self.tree.GetSelection())
            panel = EditingFrame(self)
            self.nb.AddPage(panel, dlg.GetValue(), select=True)
            self.tree.AppendItem(self.tree.GetSelection(), dlg.GetValue(), 1)
            self.tree.ExpandAll()
        dlg.Destroy()

    #Exit
    def OnClose(self, event=None):
        dlg = wx.MessageDialog(self,
                               "Do you really want to close this application?",
                               "Confirm Exit", wx.OK | wx.CANCEL | wx.ICON_QUESTION)
        result = dlg.ShowModal()
        dlg.Destroy()
        if result == wx.ID_OK:
            self.db.close()
            self.Destroy()

    #About me
    def OnAbout(self, event=None):
        info = wx.AboutDialogInfo()
        info.SetName("bleh")
        info.SetVersion("0.1")
        info.SetLicence("GPL")
        info.SetDevelopers(["ME!"])
        info.SetDescription("Wurst wurst Brot brot")
        wx.AboutBox(info)

    #save files into database
    def OnSave(self, event=None):
        dlg = wx.MessageDialog(self, "Do you want to save your data into database? \n",
                               style=wx.OK | wx.CANCEL)
        valid = dlg.ShowModal()
        if valid == wx.ID_OK:
            project_dict = {}

            for item in self.items:
                temp_dict = {self.tree.GetItemText(item): []}
                print self.tree.GetItemText(item)
                (child, cookie) = self.tree.GetFirstChild(item)
                while child.IsOk():
                    print self.tree.GetItemText(child)
                    temp_dict[self.tree.GetItemText(item)].append(self.tree.GetItemText(child))
                    (child, cookie) = self.tree.GetNextChild(item, cookie)
                project_dict.update(temp_dict)

            self.dbroot['users'][self.user]['data'] = project_dict
            self.dbroot._p_changed = 1
            transaction.commit()

    #load files from database
    def OnLoad(self, event):
        self.tree.DeleteChildren(self.root)
        dlg = wx.MessageDialog(self, "Do you want to load your data from database? \n"
                                     "Carefully you will lose all or your unsaved projects",
                               style=wx.OK | wx.CANCEL | wx.ICON_WARNING)
        valid = dlg.ShowModal()
        if valid == wx.ID_OK:
            self.items = []
            for index, key in enumerate(self.dbroot['users'][self.user]['data']):
                self.items.append(self.tree.AppendItem(self.root, key, 0))
                for item in self.dbroot['users'][self.user]['data'][key]:
                    self.tree.AppendItem(self.items[index], str(item), 1)
            self.tree.ExpandAll()


class EditingFrame(ogl.ShapeCanvas):
    def __init__(self, parent):
        ogl.ShapeCanvas.__init__(self, parent)
        # put stuff into sizer

        self.diagram = ogl.Diagram()
        self.SetDiagram(self.diagram)
        self.diagram.SetCanvas(self)
        self.shapes = []
        self.save_gdi = []

        # self.addShape(
        #     DiamondShape(85, 50),
        #     305, 600, wx.BLACK_PEN, wx.LIGHT_GREY_BRUSH, "Rectangle"
        # )
        #
        # self.addShape(
        #     ScenarioShape(),
        #     305, 60, wx.BLACK_PEN, wx.LIGHT_GREY_BRUSH, "MITM"
        # )


    def addScenario(self, posx=100, posy=100, name="default"):
        self.addShape(
            ScenarioShape(),
            posx, posy, wx.BLACK_PEN, wx.LIGHT_GREY_BRUSH, name
        )
        self.drawPen()

    def drawPen(self):
        dc = wx.ClientDC(self)
        self.PrepareDC(dc)

        for x in range(len(self.shapes)):
            fromShape = self.shapes[x]
            if x + 1 == len(self.shapes):
                toShape = self.shapes[0]
            else:
                toShape = self.shapes[x + 1]

            line = ogl.LineShape()
            line.SetCanvas(self)
            line.SetPen(wx.BLACK_PEN)
            line.SetBrush(wx.BLACK_BRUSH)
            line.AddArrow(ogl.ARROW_ARROW)
            line.MakeLineControlPoints(2)
            fromShape.AddLine(line, toShape)
            self.diagram.AddShape(line)
            line.Show(True)

    def addShape(self, shape, x, y, pen, brush, text):
        # Composites have to be moved for all children to get in place
        if isinstance(shape, ogl.CompositeShape):
            dc = wx.ClientDC(self)
            self.PrepareDC(dc)
            shape.Move(dc, x, y)
        else:
            shape.SetDraggable(True, True)
        shape.SetCanvas(self)
        shape.SetX(x)
        shape.SetY(y)
        if pen:
            shape.SetPen(pen)
        if brush:
            shape.SetBrush(brush)
        if text:
            for line in text.split('\n'):
                shape.AddText(line)
                shape.SetShadowMode(ogl.SHADOW_RIGHT)
        self.diagram.AddShape(shape)
        shape.Show(True)

        evthandler = MyEvtHandler()
        evthandler.SetShape(shape)
        evthandler.SetPreviousHandler(shape.GetEventHandler())
        shape.SetEventHandler(evthandler)

        self.shapes.append(shape)
        return shape                   #


        #Start Frame as an app


class App(wx.App):
    def OnInit(self):
        self.frame = MainFrame()
        self.frame.Show()
        self.frame.Maximize()
        self.SetTopWindow(self.frame)
        return True


#run the programmm
def main():
    """This is my Penetration-Test-Generator prototype """
    app = App()
    ogl.OGLInitialize()
    app.MainLoop()


if __name__ == '__main__':
    main()



